<UserControl x:Class="Instrument.Ui.Views.InstrumentGridView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
﻿   <UserControl.Resources>
﻿       <Style TargetType="{x:Type DataGrid}">
            <Setter Property="Background" Value="Black"/>
            <Setter Property="GridLinesVisibility" Value="Horizontal"/>
        </Style>
﻿   </UserControl.Resources>
    <Grid>
        <DataGrid ItemsSource="{Binding InstrumentPrices}" 
                  AutoGenerateColumns="False"
                  IsReadOnly="True">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Instrument" Binding="{Binding Instrument}" />
                <DataGridTemplateColumn Header="Price">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <priceGrid:PriceView DataContext="{Binding Price}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</UserControl>

<UserControl x:Class="PriceGrid.PriceView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:priceGrid="clr-namespace:PriceGrid"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <TextBlock Text="{Binding Value}" >
        <TextBlock.Style>
            <Style TargetType="TextBlock">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Change}" Value="{x:Static priceGrid:PriceChangeDirection.Increase}">
                        <Setter Property="Foreground" Value="Green"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Change}" Value="{x:Static priceGrid:PriceChangeDirection.Decrease}">
                        <Setter Property="Foreground" Value="Red"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </TextBlock.Style>
    </TextBlock>
</UserControl>

public class PricesGridViewModel : INotifyPropertyChanged
    {
        private ObservableCollection<InstrumentPriceViewModel> _instrumentPrices;
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
        }

        public ObservableCollection<InstrumentPriceViewModel> InstrumentPrices
        {
            get { return _instrumentPrices; }
            set
            {
                if (_instrumentPrices != value)
                {
                    _instrumentPrices = value;
                    OnPropertyChanged("InstrumentPrices");
                }
            }
        }
    }

    public class InstrumentPriceViewModel : INotifyPropertyChanged
    {
        private string _instrument;
        private PriceViewModel _price;
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
        }

        public InstrumentPriceViewModel()
        {
            _price = new PriceViewModel();
        }

        public string Instrument
        {
            get { return _instrument; }
            set
            {
                if (_instrument != value)
                {
                    _instrument = value;
                    OnPropertyChanged("Instrument");
                }
            }
        }

        public PriceViewModel Price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
    }

    public class PriceViewModel : INotifyPropertyChanged
    {
        private PriceChangeDirection _change;
        private decimal _value;
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
        }

        public decimal Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    _value = value;
                    OnPropertyChanged("Value");
                }
            }
        }

        public PriceChangeDirection Change
        {
            get { return _change; }
            set
            {
                if (_change != value)
                {
                    _change = value;
                    OnPropertyChanged("Change");
                }
            }
        }
    }

    public enum PriceChangeDirection
    {
        Undefined,
        Increase,
        Decrease
    }
